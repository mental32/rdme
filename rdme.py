"""A tool to help the composing of READMEs."""

from typing import List

from click import command, argument, option


TEMPLATE = """
[//] # (README generated by rdme: https://github.com/menatl32/rdme)
{header}
{body}
""".strip()

HEADER_TEMPLATE = """
# {name}
## {description}
""".strip()

BODY_TEMPLATE = """
{index}
{sections}
""".strip()


@command()
@argument("name", required=True)
@option("-d", "--desc", default="")
@option("-o", "--output", default=None)
@option("-s", "--section", "sections", multiple=True)
@option("--index/--no-index", "make_index")
def main(
    *, name: str, output: str, desc: str, sections: List[str], make_index: bool  # pylint: disable=bad-continuation
) -> None:
    """Application entry point."""
    desc = (desc or name).title()
    header = HEADER_TEMPLATE.format(name=name.title(), description=desc)

    index_entries = []
    section_entries = []

    for section in map(str.title, sections):
        if make_index:
            index_entries.append(f"  - [{section}](#{section})")
            tag = f"# [{section}](#Index)"
        else:
            tag = f"# {section}"

        section_entries.append(tag)

    if make_index and index_entries:
        index_body = "\n".join(index_entries)
        index = f"\n# Index\n\n{index_body}\n"
    else:
        index = ""

    body = BODY_TEMPLATE.format(index=index, sections="\n\n".join(section_entries))

    template = TEMPLATE.format(header=header, body=body).strip()

    filename = output or f"{name}.md"

    with open(filename, "w") as inf:
        inf.write(f"{template}\n")


if __name__ == "__main__":
    main()  # pylint: disable=missing-kwoa
